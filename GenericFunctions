### Script wrote by Wilfred Wong
require(bigWig)
require(RColorBrewer)
require(prodlim)
require(GenomicRanges)
require(BRGenomics)
require(ggplot2)
require(dplyr)
require(plyr)
require(pheatmap)
require(bigWig)
require(ggplot2)
require(matrixcalc)


GRangesToBed<-function(gr){
  temp<-data.frame(chr=seqnames(gr),
                   start=start(gr)-1,
                   end=end(gr),
                   names=c(rep(".", length(gr))),
                   score=c(rep(".", length(gr))),
                   strand=strand(gr))
  return(temp)
}

removeOverlappingFeatures<-function(feature){
  temp<-makeGRangesFromDataFrame(as.data.frame(feature))
  
  overlaps<-findOverlaps(temp,temp)
  overlappingIntervalIDs<-unique(queryHits(overlaps[queryHits(overlaps)!=subjectHits(overlaps),]))
  
  nonOverlappingRanges<-temp[-overlappingIntervalIDs]
  overlapsRemovedFeatures<-GRangesToBed(nonOverlappingRanges)
  
  if(length(overlappingIntervalIDs)==0)
    return(feature)
  else{
    #Additional Sanity Check
    remainingOverlaps<-overlapsRemovedFeatures[duplicated(overlapsRemovedFeatures[,(1:3)]),(1:3)]  
    rows <- match_df(overlapsRemovedFeatures,remainingOverlaps)
    overlapsRemovedFeatures<-anti_join(overlapsRemovedFeatures,rows)
    
    return(overlapsRemovedFeatures)
  }
}

reduceToActiveFeatures<-function(feature,bwp,bwm,precision=TRUE,ncores=detectCores()){
  
  featureGR<-makeGRangesFromDataFrame(as.data.frame(feature))
  
  print('Files Loaded!')
  
  bigwigGR<-import_bigWig(plus_file=bwp,minus_file=bwm,makeBRG=precision)
  
  print('Files Loaded!')
  
  featureCounts<-getCountsByRegions(bigwigGR,featureGR,expand_ranges=!precision,ncores = ncores)
  featureActive<-feature[featureCounts!=0,]
  
  return(featureActive)
}

getLengthScaledCounts <- function(dataset.gr, genelist, nbins,
                                  expand_ranges = FALSE,
                                  ncores = detectCores()) {
  
  clist <- getCountsByPositions(dataset.gr, genelist, 
                                simplify.multi.widths = "list",
                                ncores = ncores, expand_ranges=expand_ranges)
  
  binlist <- Map(function(x, y, nbins) {
    binsize <- floor(y / nbins)
    mat <- matrix(x[seq_len(nbins*binsize)], nrow = binsize)
    colSums(mat) / binsize
  }, clist, width(genelist), nbins = nbins)
  
  binlistCleaned<-lapply(binlist, function(x) if(length(x)!=0) x)
  
  do.call(rbind, binlistCleaned)
}

mapReduceLengthScaledCounts <- function(dataset.gr, genelist, nbins,
                                        expand_ranges = FALSE,ncores = detectCores()) {
  
  # divide genes into bins for every 10-fold increase in length
  loglen <- log10(width(genelist))
  bottom <- floor(min(loglen))
  top <- ceiling(max(loglen))
  lenbin <- findInterval(loglen, seq(bottom, top))
  
  # get length-scaled count matrices for each length bin
  outlist <- lapply(seq_len(max(lenbin)), function(i) {
    getLengthScaledCounts(dataset.gr, genelist[lenbin == i], 
                          nbins = nbins, expand_ranges = expand_ranges,ncores)
  })
  
  # combine and return
  do.call(rbind, outlist)
}

generateFlanked<-function(feature,percentFlank){
  featureLengths<-feature[,3]-feature[,2]
  flankLengths<-round(featureLengths*percentFlank)
  feature[,2]<-feature[,2]-flankLengths
  feature[,3]<-feature[,3]+flankLengths
  feature<-feature[feature[,2]>0,]
  return(feature)
}


generateBedIntervals<-function(bed,leftFlank=0,rightFlank=0,offset=0){
  feature<-bed
  
  tempPlus<-feature[feature$strand=='+',]
  tempMinus<-feature[feature$strand=='-',]
  
  if(length(offset)!=1){
    offsetPlus<-offset[feature$strand=='+']
    offsetMinus<-offset[feature$strand=='-']
  }else{
    offsetPlus=offset
    offsetMinus=offset
  }
  if(length(rightFlank)!=1){
    rightFlankPlus=rightFlank[feature$strand=='+']
    rightFlankMinus=rightFlank[feature$strand=='-']
  }
  else{
    rightFlankPlus=rightFlank
    rightFlankMinus=rightFlank
  }
  if(length(leftFlank)!=1){
    leftFlankPlus=leftFlank[feature$strand=='+']
    leftFlankMinus=leftFlank[feature$strand=='-']
  }
  else{
    leftFlankPlus=leftFlank
    leftFlankMinus=leftFlank
  }
  
  plus<-tempPlus
  plus[,2:3]<-cbind(plus$start-leftFlankPlus+offsetPlus,plus$start+rightFlankPlus+offsetPlus)
  
  minus<-tempMinus
  minus[,2:3]<-cbind(minus$end-offsetMinus-rightFlankMinus,minus$end-offsetMinus+leftFlankMinus)
  
  return(rbind(plus,minus))
}


loadBed<-function(directbed=NULL,bedFile,featureColumn,featureSelect,featureLength=0){
  if(is.null(directbed)){
    bed<-read.table(bedFile, header=FALSE,sep="\t",fill=FALSE,quote="");
    
    if(ncol(bed)==10){
      colnames(bed)<-c("chr", "start", "end", "geneid", "score", "strand", "source", "type", "phase", "attributes")  
    } else{
      colnames(bed)<-c("chr", "start", "end", "geneid", "score", "strand", "source", "type", "phase")  
    }
    if(featureSelect!='exon'){
      feature<-bed[bed[,featureColumn]==featureSelect,]
      feature<-feature[(feature[,3]-feature[,2])>featureLength,]
    }
    else{
      if('gene' %in% bed[,featureColumn]){
        genebed<-bed[bed[,featureColumn]=='gene',]
      }else{
        genebed<-bed[bed[,featureColumn]=='transcript',]
      }
      geneplusbed<-genebed[genebed$strand=='+',]
      geneminusbed<-genebed[genebed$strand=='-',]
      
      exonbed<-bed[bed[,featureColumn]=='exon',]
      firstExonPlus<-row.match(geneplusbed[,1:2],exonbed[,1:2])
      firstExonMinus<-row.match(geneminusbed[,c(1,3)],exonbed[,c(1,3)])
      lastExonPlus<-row.match(geneplusbed[,c(1,3)],exonbed[,c(1,3)])
      lastExonMinus<-row.match(geneminusbed[,1:2],exonbed[,1:2])
      exonRemoval<-c(firstExonPlus,firstExonMinus,lastExonPlus,lastExonMinus)
      exonsFiltered<-exonbed[-na.omit(exonRemoval),]
      
      feature<-exonsFiltered
      feature<-feature[(feature[,3]-feature[,2])>featureLength,]
    }
  }else{
    feature<-directbed
    feature<-feature[(feature[,3]-feature[,2])>featureLength,]
  }
}



loadBed2<-function(directbed=NULL,bedFile,featureColumn,featureSelect,featureLength=0){
  if(is.null(directbed)){
    bed<-read.table(bedFile, header=FALSE,sep="\t",fill=FALSE,quote="");
    
    if(ncol(bed)==10){
      colnames(bed)<-c("chr", "start", "end", "geneid", "score", "strand", "source", "type", "phase", "attributes")  
      print("bed10")
    } else{
      colnames(bed)<-c("chr", "sth", "geneid", "start", "end", "score", "strand", "source", "type") 
      print("no_bed10") 
    } 

    if(featureSelect!='exon'){
      feature<-bed[bed[,featureColumn]==featureSelect,]
      feature<-feature[(feature[,5]-feature[,4])>featureLength,]
    }
    else{
      if('gene' %in% bed[,featureColumn]){
        genebed<-bed[bed[,featureColumn]=='gene',]
      }else{
        genebed<-bed[bed[,featureColumn]=='transcript',]
      }
      geneplusbed<-genebed[genebed$strand=='+',]
      geneminusbed<-genebed[genebed$strand=='-',]
      
      exonbed<-bed[bed[,featureColumn]=='exon',]
      firstExonPlus<-row.match(geneplusbed[,1:2],exonbed[,1:2])
      firstExonMinus<-row.match(geneminusbed[,c(1,3)],exonbed[,c(1,3)])
      lastExonPlus<-row.match(geneplusbed[,c(1,3)],exonbed[,c(1,3)])
      lastExonMinus<-row.match(geneminusbed[,1:2],exonbed[,1:2])
      exonRemoval<-c(firstExonPlus,firstExonMinus,lastExonPlus,lastExonMinus)
      exonsFiltered<-exonbed[-na.omit(exonRemoval),]
      
      feature<-exonsFiltered
      feature<-feature[(feature[,5]-feature[,4])>featureLength,]
    }


  }else{
    feature<-directbed
    feature<-feature[(feature[,5]-feature[,4])>featureLength,]
  }
}

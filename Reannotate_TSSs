#Import libraries needed for data analysis and plotting
suppressPackageStartupMessages({
    library(rtracklayer)
    library(optparse)
    library(GenomicRanges)
    library(gridExtra)
    library(ggplot2)
    library(foreach)
    library(iterators)
    library(reshape2)
    library(BRGenomics)
    library(dplyr)
    library(tidyverse)
});





Count.reads.InBins_noSubsample2 = function(bw_plus, bw_minus, regions = genes, binsize = 10, field = "score"){
    
    #Import bigwigs
    imported_bw_plus = import.bw(bw_plus);
    imported_bw_minus = import.bw(bw_minus);

    strand(imported_bw_plus) = "+";
    strand(imported_bw_minus) = "-";
    
    Pl.Min = c(imported_bw_plus, imported_bw_minus);

    #Make GRanges BRG
    bw.file.BRG = makeGRangesBRG(Pl.Min);
    bw.file.BRG$score = abs(bw.file.BRG$score);

    #Count DHS signal within each CTCF peak
    res = getCountsByPositions(bw.file.BRG, regions, binsize = binsize, field="score", FUN = "sum");
    
    return(res)
}

Extend <- function(x, upstream = 0, downstream = 0){
    
    if (any(strand(x) == "*"))
        warning("'*' ranges were treated as '+'")
    on_plus <- strand(x) == "+" | strand(x) == "*"
    new_start <- start(x) - ifelse(on_plus, upstream, downstream)
    new_end <- end(x) + ifelse(on_plus, downstream, upstream)
    ranges(x) <- IRanges(new_start, new_end)
    trim(x)
}



Reannotate_TSS_5p_map <- function(bw_plus, bw_minus, old_regions, binsize = 10, field = "score"){
    
     #Resize the old_regions to a 500bp bin centered on the currently annotated TSS
     old_regions_res = promoters( old_regions, upstream = 250, downstream = 250);
    
     #Count signal 
     proseq = Count.reads.InBins_noSubsample2(bw_plus = bw_plus, 
                                              bw_minus = bw_minus, 
                                              regions = old_regions_res, binsize = binsize, field = field);

    
    #Get max for each row
    max.per.row = apply(proseq, 1, max);
    
    #Get the index position of the first 10bp-bin that corresponds to the max value (should be the maxTSS)
    list.TSS.index = list();
    for( i in 1:nrow(proseq) ){ list.TSS.index = c( list.TSS.index, which(proseq[i,] == max.per.row[i])[1] ) }
    
    #Collapse the current annotations to the start position
    TSS_reannot = old_regions;
    TSS_reannot = resize( TSS_reannot, fix = "start", width = 1 );

    
    #Reannotate the TSSs --> shift each "resized" TSS start by the number of bases in list.TSS.index 
    reannot.GRanges = GRanges()

    for( i in 1:length(TSS_reannot) ){

        if( !is.na(list.TSS.index[i]) ){
            reannot.GRanges = append( reannot.GRanges, Extend( TSS_reannot[i], upstream = 1, downstream = (as.integer(list.TSS.index[i]) * 10) ) ) 
            
            }else{
            
                i = i+1;
            
                 }
                                      }
    
    return(reannot.GRanges)
}

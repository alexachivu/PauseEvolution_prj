suppressPackageStartupMessages({
    library(rtracklayer)
    library(optparse)
    library(GenomicRanges)
    library(gridExtra)
    library(ggplot2)
    library(foreach)
    library(iterators)
    library(reshape2)
    library(BRGenomics)
    library(dplyr)
    library(tidyverse)
    library(viridis)
    library(ggpointdensity)
    library(DESeq2)
});


#Import plus and minus PROseq BigWigs and merge them
Import.BigWigs = function(BW_plus.path, BW_minus.path, ranges ){
    
    #Import PROseq BigWig files
        PRO_plus  = import.bw(BW_plus.path, which = ranges);
        PRO_minus = import.bw(BW_minus.path, which = ranges);

    #Set the strand
        strand(PRO_plus) = "+";
        strand(PRO_minus) = "-";
    
    #Make all PROseq score positive
        PRO_minus$score = (abs(PRO_minus$score));
        PRO_plus$score  = (abs(PRO_plus$score));

    
    #Merge PROseq plus and minus strands & convert to BRG
        PROseq = makeGRangesBRG( append( PRO_plus, PRO_minus ) );
        PROseq = keepStandardChromosomes(PROseq, pruning.mode="coarse");
    
    return(PROseq)
}

#Ranges must have a column names "Gn.name" showing the gene names of each entry
Run.DEseq2 = function( PROseq.list, ranges, spikeins.list = c(), ncores = 1, field = "score" ){
        
        
    #Filter data before DEseq analysis
    dds = getDESeqDataSet( PROseq.list, ranges, ncores = ncores, field = field);
    
    #Run DEseq2
    res.dds = getDESeqResults(dds, "B", "A", sizeFactors = spikeins.list, alpha = 0.05);
    #res.dds = getDESeqResults(dds, "B", "A", alpha = 0.05);

    #Add gene information to DEseq results
    res.dds_genes = merge(as.data.frame(res.dds), as.data.frame(ranges), by="row.names", all=TRUE);
    res.dds_genes = na.omit(as.data.frame(res.dds_genes)) # --> genes w/o NAs

    #Prepare the function output
    out = list(res.dds, res.dds_genes);

    return(out)
}


Plot.MAs = function(output_Run.DEseq2, file.type = "image/png", pl.height = 4, pl.width = 4, limits = c()){
    
    options(jupyter.plot_mimetypes = file.type, repr.plot.width = pl.width, repr.plot.height = pl.height);

    #Plot a generic MA graph
    plotMA( na.omit(output_Run.DEseq2[[1]]), alpha = 0.05, ylim  = limits )
    
    #Plot a more complex MA, with heatmap
    ggplot( as.data.frame( na.omit(output_Run.DEseq2[[1]]) ), mapping = aes(x=baseMean, y=log2FoldChange) ) +
    geom_point() +
    scale_x_log10() +
    scale_y_continuous( limits = limits) +
    geom_pointdensity(adjust = 0.8, size = 1.5) +
        scale_color_viridis()+
    xlab("baseMean") +
    ylab("log2FC") +
    theme_classic() + 
    geom_hline(yintercept = 0, alpha=0.5, linetype="dashed", col = "red", size = 1)
    
    
}


Plot.MAs_list = function(output_Run.DEseq2, list.genes= c(), file.type = "image/png", pl.height = 4, pl.width = 4){
    
    options(jupyter.plot_mimetypes = file.type, repr.plot.width = pl.width, repr.plot.height = pl.height);

    #Plot only data in the list provided as input
    plotting.data = output_Run.DEseq2[[2]][output_Run.DEseq2[[2]]$Gn.name %in% list.genes,];
    
 
    #Plot a more complex MA, with heatmap
    ggplot( as.data.frame( na.omit(plotting.data) ), mapping = aes(x=baseMean, y=log2FoldChange) ) +
    geom_point() +
    geom_text(aes(label = Gn.name),hjust=0, vjust=0) +
    scale_x_log10() +
    scale_y_continuous() +
    geom_pointdensity(adjust = 0.8, size = 1.5) +
        scale_color_viridis()+
    xlab("baseMean") +
    ylab("log2FC") +
    theme_classic() + 
    geom_hline(yintercept = 0, alpha=0.5, linetype="dashed", col = "red", size = 1)
    
    
}

#Example:
options(warn=-1);
SpikeIn.Mean = mean( 100444, 100494, 121833,     122693, 99896, 124341  );

#DEseq at Gencode genes GBs --> HS vs NHS (no dTAG)
DEseq.res_HS.dTAG_NHS.GB = Run.DEseq2(PROseq.list = PROseq.HS.dTAG_HS, ranges = m.GB, spikeins.list = c( 100444/SpikeIn.Mean, 100494/SpikeIn.Mean, 121833/SpikeIn.Mean, 122693/SpikeIn.Mean, 99896/SpikeIn.Mean, 124341/SpikeIn.Mean ))

#Generate MS plot
    Plot.MAs( DEseq.res_HS.dTAG_NHS.GB, file.type = "image/png", limits = c(-6, 6) )

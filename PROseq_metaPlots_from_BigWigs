suppressPackageStartupMessages({
    library(rtracklayer)
    library(optparse)
    library(GenomicRanges)
    library(gridExtra)
    library(ggplot2)
    library(foreach)
    library(iterators)
    library(reshape2)
    library(BRGenomics)
    library(dplyr)
    library(tidyverse)
});

#For plotting
options(jupyter.plot_mimetypes="image/png", repr.plot.width=4, repr.plot.height=3);

theme_set(
   theme_classic() +
        theme(
            panel.border = element_blank(),  
            # Remove panel background
            panel.background = element_blank(),
            legend.background = element_blank(),
            # Add axis line
            axis.line = element_line(colour = "black", size=0.5),
            panel.grid.major = element_line(colour = "white"),
            axis.text.x = element_text( color="black", size=14),
            axis.text.y = element_text( color="black", size=16),
            axis.title.x = element_text(color="black", size=14),
            axis.title.y = element_text(color="black", size=16)
            )
);


Import.bws_PROseq = function(path = ".", pattern_plus = "*_dm3.Total.spike_plus.bw", pattern_minus = "*_dm3.Total.spike_minus.bw", regions = genes, binsize = 10, field = "score" ){
    options(warn=-1)

    #Import all Rdata in a given directory
    fn_plus = list.files(path = path, pattern = pattern_plus, all.files = TRUE, full.names = TRUE, include.dirs = FALSE);
    fn_minus = list.files(path = path, pattern = pattern_minus, all.files = TRUE, full.names = TRUE, include.dirs = FALSE);

    #Make a list of Rdatas
    BW_list_plus = GRangesList();
    BW_list_minus = GRangesList();

    for(i in fn_plus) {
        
        #Remember the file name
        fname_plus = basename(i);
        print(fname_plus);
        fname_plus = gsub(pattern_plus, "", fname_plus);
        
        #Load the data as the "reads" variable
        imported_bw_plus = import.bw(i, which = regions );
        imported_bw_plus$File.name = fname_plus;
        strand(imported_bw_plus) = "+";

        BW_list_plus = c(BW_list_plus, GRangesList(imported_bw_plus));


    }
    
    for(i in fn_minus) {
        
        #Remember the file name
        fname_minus = basename(i);
        #print(fname_minus);
        fname_minus = gsub(pattern_minus, "", fname_minus);
        
        #Load the data as the "reads" variable
        imported_bw_minus = import.bw(i, which = regions );
        imported_bw_minus$File.name = fname_minus;
        strand(imported_bw_minus) = "-";

        BW_list_minus = c(BW_list_minus, GRangesList(imported_bw_minus));


    }
    
    
    BW_list_merged = GRangesList();
    
    
    for(j in 1:length(BW_list_plus)){
        
        Pl_Min = c(BW_list_plus[[j]], BW_list_minus[[j]]);
        BW_list_merged = c(BW_list_merged, GRangesList(Pl_Min));
        
    }
    
    
    #Make BRG objects out of all entried in the BW_list_merged
       BW_list.out = data.frame();
    
    for(i in 1:length(BW_list_merged)){

            j = makeGRangesBRG(BW_list_merged[[i]]);
        
            reads = Count.reads.InBins(j, regions = regions, binsize = binsize, field = field);
            name_BW = unique(BW_list_merged[[i]]$File.name);
            #name_BW2 = gsub("_dm3.Total.spike_*.bw", "", name_BW);
            reads$sample.name = name_BW;
            BW_list.out = rbind(BW_list.out, reads);

        }   
    
   
    
   return(BW_list.out)
    
}
               
                           
            


                           
                           
Count.reads.InBins = function(bw.file, regions = genes, binsize = 10, field = "score"){
    
   
    #Make GRanges BRG
    bw.file.BRG = makeGRangesBRG(bw.file);

    #Count DHS signal within each CTCF peak
    res = getCountsByPositions(bw.file.BRG, regions, binsize = binsize, field="score", FUN = "sum");
    res2 = res/1;
    
    #Subsample matrix
    res.subs = metaSubsampleMatrix( abs(res2) , prop.sample = 0.2, ncore = 10,  lower = 0.25, upper = 0.75,);
    
    #Name each entry
    res.subs$sample.name = unique(bw.file$File.name);

    
    return(res.subs)
    #return(res2)

}

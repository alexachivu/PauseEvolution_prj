### Script adapted from Gilad Barshad

import pandas as pd
import os
import numpy as np
import matplotlib.pyplot as plt

motif = pd.read_csv(os.path.join('Vivian_pause_motif.csv'), index_col = 0)
#motif = pd.read_csv(os.path.join('Human_TATAbox.csv'), index_col = 0)
#motif = pd.read_csv(os.path.join('Mammalian.Inr.csv'), index_col = 0)
#motif = pd.read_csv(os.path.join('mte.csv'), index_col = 0)
#motif = pd.read_csv(os.path.join('DPE.csv'), index_col = 0)

motif.columns = motif.columns.astype(int)

#Import the DNA regions to compute the enrichment of a particular motif
#c1, c2, c3 = clusters 1,2,3 i Fig. 3
c1 =  pd.read_csv(os.path.join('Heatmap_sequences.cluster_1.1kb.bed'), sep = '\t', names = ['tss', 'seq'])
c2 =  pd.read_csv(os.path.join('Heatmap_sequences.cluster_2.1kb.bed'), sep = '\t', names = ['tss', 'seq'])
c3 =  pd.read_csv(os.path.join('Heatmap_sequences.cluster_3.1kb.bed'), sep = '\t', names = ['tss', 'seq'])


def motifScore(seq, motif):
    motif.loc['N'] = [0]*len(motif.columns)
    listOut = []
    i = abs(min(motif.columns.astype(int)))
    while i < len(seq) - max(motif.columns.astype(int)):
        iterSeq = seq.upper()[i-abs(min(motif.columns.astype(int))):i+max(motif.columns.astype(int)) +1]
        iterList = []
        c = 0
        for n in motif.columns.astype(int):
            iterList.append(motif[n][iterSeq[c]])
            c += 1
        listOut.append(np.mean(iterList))
        i += 1
    return listOut


c1_scores = pd.DataFrame(columns = list(range(-(500)+abs(min(motif.columns.astype(int))), 500-max(motif.columns.astype(int))-1)))
for i in c1.index:
    c1_scores.loc[c1['tss'][i]] = motifScore(c1['seq'][i], motif)
    print('c1', i)

c2_scores = pd.DataFrame(columns = list(range(-500+abs(min(motif.columns.astype(int))), 500-max(motif.columns.astype(int))-1)))
for i in c2.index:
    c2_scores.loc[c2['tss'][i]] = motifScore(c2['seq'][i], motif)
    print('c2', i)

c3_scores = pd.DataFrame(columns = list(range(-500+abs(min(motif.columns.astype(int))), 500-max(motif.columns.astype(int)))))
for i in c3.index:
    c3_scores.loc[c2['tss'][i]] = motifScore(c3['seq'][i], motif)
    print('c3', i)

motif_meta = pd.concat([c1_scores.mean(), c2_scores.mean(), c3_scores.mean()], axis = 1)
motif_meta.columns = ['Cluster 1', 'Cluster 2', 'Cluster 3']


motif_meta = c2_scores.mean()
motif_meta.plot(color = ['navy', 'darkorange', 'r'])
plt.xticks([0, 244, 489, 734, 979], [-500, -250, 0, 250, 500])
plt.xticks(size = 16)
plt.yticks(size = 16)
plt.ylabel('Motif Score', size = 16)
plt.xlabel('Distance to TSS (bp)', size = 16)

plt.savefig("Clusters.pdf", format="pdf", bbox_inches="tight")

